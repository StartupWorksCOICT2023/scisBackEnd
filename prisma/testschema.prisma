// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  teachers  Teacher[]
  students  Student[]
}

model scisUser {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  roles        Role[]
  userProfile  UserProfile?
  tokens       Token[]   @relation("UserTokens")
  teachers     Teacher[]
  students     Student[] // Added relation
  parents      Parent[]  // Added relation
}

model Role {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  users        scisUser[]
}

model Token {
  id           Int       @id @default(autoincrement())
  token        String    @unique
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         scisUser   @relation("UserTokens", fields: [userId], references: [id])
  userId       Int
}

model Teacher {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         scisUser?     @relation(fields: [userId], references: [id])
  userId       Int?
  school       School    @relation(fields: [schoolId], references: [id])
  schoolId     Int
  subjects     Subject[]
}

model ClassLevel {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //class_code i.e F32023

  // Relations
  students     Student[] @relation("ClassLevelStudents")
  subjects     Subject[] @relation("ClassLevelSubjects")
}

model Subject {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //subjectcode i.e F3GEOG2020

  // Relations
  teacher      Teacher   @relation(fields: [teacherId], references: [id])
  teacherId    Int
  tests        Test[]
  classLevels  ClassLevel[] @relation("ClassLevelSubjects")
}

model Test {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // test type i.e Terminal, quiz, exam, Midterm
  // test code

  // Relations
  subject      Subject   @relation(fields: [subjectId], references: [id])
  subjectId    Int
  studentResults StudentResults[]
}

model StudentResults {
  id           Int       @id @default(autoincrement())
  studentId    Int
  testId       Int
  marksObtained Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  student      Student   @relation(fields: [studentId], references: [id])
  test         Test      @relation(fields: [testId], references: [id])
}

model Student {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         scisUser?     @relation(fields: [userId], references: [id])
  userId       Int?
  school       School    @relation(fields: [schoolId], references: [id])
  schoolId     Int
  studentResults StudentResults[]
  parents      Parent[]  // Added relation
  classLevels  ClassLevel[] @relation("ClassLevelStudents")
}

model Parent {
  id           Int       @id @default(autoincrement())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         scisUser?     @relation(fields: [userId], references: [id])
  userId       Int?
  student      Student   @relation(fields: [studentId], references: [id])
  studentId    Int
}

model UserProfile {
  id           Int       @id @default(autoincrement())
  firstName    String?
  lastName     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //dob
  //phone1? (why optional is if its a student)
  //phone2?
  //gender
  //religion
  //classes [], if a student has one class if a teacher has many
  //occupation 

  // Relations
  user         scisUser      @relation(fields: [userId], references: [id])
  userId       Int       @unique
}
