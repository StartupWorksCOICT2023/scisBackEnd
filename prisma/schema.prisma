generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  teachers  Teacher[]
}

model UserProfile {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  lastName       String?
  userId         String   @unique
  secondname     String?
  dob            String?
  phone1         String
  phone2         String?
  gender         String?
  religion       String?
  email          String?
  occupation     String?
  address        String?
  district       String?
  region         String?
  country        String?
  profilePicture String?
  isActive       String?
  student        Student[] @relation("Studentsprofile")
  parent         Parent[]  @relation("parentsprofile")
  teacher        Teacher[] @relation("Teachersprofile")
  user           scisUser? @relation("UserProfileToScisUser", fields: [userId], references: [scisuserid])
}

model scisUser {
  id          Int          @id @default(autoincrement())
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  scisuserid  String       @unique
  parents     Parent[]
  students    Student[]
  teachers    Teacher[]
  tokens      Token[]      @relation("UserTokens")
  userProfile UserProfile? @relation("UserProfileToScisUser")
  roles       Role[]       @relation("RoleToscisUser")
}


model Role {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     scisUser[] @relation("RoleToscisUser")
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  expiresAt DateTime
  userId    Int
  user      scisUser @relation("UserTokens", fields: [userId], references: [id])
}

model Teacher {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int?
  schoolId  Int
  subjects  Subject[]
  school    School    @relation(fields: [schoolId], references: [id])
  user      scisUser? @relation(fields: [userId], references: [id])
  profile        UserProfile[]        @relation("Teachersprofile")

}

model ClassLevel {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[] @relation("ClassLevelStudents")
  subjects  Subject[] @relation("ClassLevelSubjects")
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teacherId   Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  tests       Test[]
  classLevels ClassLevel[] @relation("ClassLevelSubjects")

}

model Test {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subjectId      Int
  studentResults StudentResults[]
  subject        Subject          @relation(fields: [subjectId], references: [id])
}

model StudentResults {
  id            Int      @id @default(autoincrement())
  studentId     Int
  testId        Int
  marksObtained Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  student       Student  @relation(fields: [studentId], references: [id])
  test          Test     @relation(fields: [testId], references: [id])
  
}

model Student {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         Int?
  schoolId       Int
  parents        Parent[]
  school         School           @relation(fields: [schoolId], references: [id])
  user           scisUser?        @relation(fields: [userId], references: [id])
  studentResults StudentResults[]
  classLevels    ClassLevel[]     @relation("ClassLevelStudents")
  profile        UserProfile[]        @relation("Studentsprofile")
}

model Parent {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int?
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
  user      scisUser? @relation(fields: [userId], references: [id])
  profile        UserProfile[]        @relation("parentsprofile")
}



